{"/home/travis/build/npmtest/node-npmtest-react-tag-input/test.js":"/* istanbul instrument in package npmtest_react_tag_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/lib.npmtest_react_tag_input.js":"/* istanbul instrument in package npmtest_react_tag_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_tag_input = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_tag_input = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-tag-input && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_tag_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_tag_input\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_tag_input.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_tag_input.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_tag_input.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_tag_input.__dirname + '/lib.npmtest_react_tag_input.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/dist-modules/ReactTags.js":"\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);\n\nvar _Suggestions = require(\"./Suggestions\");\n\nvar _Suggestions2 = _interopRequireDefault(_Suggestions);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Tag = require(\"./Tag\");\n\nvar _Tag2 = _interopRequireDefault(_Tag);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Constants\nvar Keys = {\n  ENTER: 13,\n  TAB: 9,\n  BACKSPACE: 8,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n  ESCAPE: 27\n};\n\nvar DEFAULT_PLACEHOLDER = \"Add new tag\";\n\nvar DefaultClassNames = {\n  tags: \"ReactTags__tags\",\n  tagInput: \"ReactTags__tagInput\",\n  tagInputField: \"ReactTags__tagInputField\",\n  selected: \"ReactTags__selected\",\n  tag: \"ReactTags__tag\",\n  remove: \"ReactTags__remove\",\n  suggestions: \"ReactTags__suggestions\",\n  activeSuggestion: \"ReactTags__activeSuggestion\"\n};\n\nvar ReactTags = function (_Component) {\n  _inherits(ReactTags, _Component);\n\n  function ReactTags(props) {\n    _classCallCheck(this, ReactTags);\n\n    var _this = _possibleConstructorReturn(this, (ReactTags.__proto__ || Object.getPrototypeOf(ReactTags)).call(this, props));\n\n    _this.state = {\n      suggestions: _this.props.suggestions,\n      query: \"\",\n      selectedIndex: -1,\n      selectionMode: false\n    };\n\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.moveTag = _this.moveTag.bind(_this);\n    _this.handlePaste = _this.handlePaste.bind(_this);\n    _this.resetAndFocusInput = _this.resetAndFocusInput.bind(_this);\n    _this.handleSuggestionHover = _this.handleSuggestionHover.bind(_this);\n    _this.handleSuggestionClick = _this.handleSuggestionClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactTags, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        classNames: _extends({}, DefaultClassNames, this.props.classNames)\n      });\n    }\n  }, {\n    key: \"resetAndFocusInput\",\n    value: function resetAndFocusInput() {\n      var _props = this.props,\n          autofocus = _props.autofocus,\n          readOnly = _props.readOnly;\n\n      if (autofocus && !readOnly) {\n        this.textInput.value = \"\";\n        this.textInput.focus();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.resetAndFocusInput();\n    }\n  }, {\n    key: \"filteredSuggestions\",\n    value: function filteredSuggestions(query, suggestions) {\n      if (this.props.handleFilterSuggestions) {\n        return this.props.handleFilterSuggestions(query, suggestions);\n      }\n\n      return suggestions.filter(function (item) {\n        return item.toLowerCase().indexOf(query.toLowerCase()) === 0;\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var suggestions = this.filteredSuggestions(this.state.query, props.suggestions);\n      this.setState({\n        suggestions: suggestions,\n        classNames: _extends({}, DefaultClassNames, props.classNames)\n      });\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(i, e) {\n      this.props.handleDelete(i);\n      this.setState({ query: \"\" });\n      this.resetAndFocusInput();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (this.props.handleInputChange) {\n        this.props.handleInputChange(e.target.value.trim());\n      }\n\n      var query = e.target.value.trim();\n      var suggestions = this.filteredSuggestions(query, this.props.suggestions);\n\n      var selectedIndex = this.state.selectedIndex;\n      if (selectedIndex >= suggestions.length) {\n        selectedIndex = suggestions.length - 1;\n      }\n\n      this.setState({\n        query: query,\n        suggestions: suggestions,\n        selectedIndex: selectedIndex\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(e) {\n      var value = e.target.value.trim();\n      if (this.props.handleInputBlur) {\n        this.props.handleInputBlur(value);\n        this.textInput.value = \"\";\n      }\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      var _state = this.state,\n          query = _state.query,\n          selectedIndex = _state.selectedIndex,\n          suggestions = _state.suggestions;\n\n      // hide suggestions menu on escape\n\n      if (e.keyCode === Keys.ESCAPE) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({\n          selectedIndex: -1,\n          selectionMode: false,\n          suggestions: []\n        });\n      }\n\n      // When one of the terminating keys is pressed, add current query to the tags.\n      // If no text is typed in so far, ignore the action - so we don't end up with a terminating\n      // character typed in.\n      if (this.props.delimiters.indexOf(e.keyCode) !== -1 && !e.shiftKey) {\n        if (e.keyCode !== Keys.TAB || query !== \"\") {\n          e.preventDefault();\n        }\n\n        if (query !== \"\") {\n          if (this.state.selectionMode && this.state.selectedIndex != -1) {\n            query = this.state.suggestions[this.state.selectedIndex];\n          }\n          this.addTag(query);\n        }\n      }\n\n      // when backspace key is pressed and query is blank, delete tag\n      if (e.keyCode === Keys.BACKSPACE && query == \"\" && this.props.allowDeleteFromEmptyInput) {\n        this.handleDelete(this.props.tags.length - 1);\n      }\n\n      // up arrow\n      if (e.keyCode === Keys.UP_ARROW) {\n        e.preventDefault();\n\n        var _state2 = this.state,\n            _selectedIndex = _state2.selectedIndex,\n            _suggestions = _state2.suggestions;\n\n\n        _selectedIndex = _selectedIndex <= 0 ? _suggestions.length - 1 : _selectedIndex - 1;\n\n        this.setState({\n          selectedIndex: _selectedIndex,\n          selectionMode: true\n        });\n      }\n\n      // down arrow\n      if (e.keyCode === Keys.DOWN_ARROW) {\n        e.preventDefault();\n        this.setState({\n          selectedIndex: (this.state.selectedIndex + 1) % suggestions.length,\n          selectionMode: true\n        });\n      }\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n\n      // See: http://stackoverflow.com/a/6969486/1463681\n      var escapeRegex = function escapeRegex(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n      };\n\n      // Used to determine how the pasted content is split.\n      var delimiterChars = escapeRegex(this.props.delimiters.map(function (delimiter) {\n        // See: http://stackoverflow.com/a/34711175/1463681\n        var chrCode = delimiter - 48 * Math.floor(delimiter / 48);\n        return String.fromCharCode(96 <= delimiter ? chrCode : delimiter);\n      }).join(\"\"));\n\n      var clipboardData = e.clipboardData || window.clipboardData;\n      var string = clipboardData.getData(\"text\");\n      var regExp = new RegExp(\"[\" + delimiterChars + \"]+\");\n      string.split(regExp).forEach(function (tag) {\n        return _this2.props.handleAddition(tag);\n      });\n    }\n  }, {\n    key: \"addTag\",\n    value: function addTag(tag) {\n      if (this.props.autocomplete) {\n        var possibleMatches = this.filteredSuggestions(tag, this.props.suggestions);\n\n        if (this.props.autocomplete === 1 && possibleMatches.length === 1 || this.props.autocomplete === true && possibleMatches.length) {\n          tag = possibleMatches[0];\n        }\n      }\n\n      // call method to add\n      this.props.handleAddition(tag);\n\n      // reset the state\n      this.setState({\n        query: \"\",\n        selectionMode: false,\n        selectedIndex: -1\n      });\n\n      this.resetAndFocusInput();\n    }\n  }, {\n    key: \"handleSuggestionClick\",\n    value: function handleSuggestionClick(i, e) {\n      this.addTag(this.state.suggestions[i]);\n    }\n  }, {\n    key: \"handleSuggestionHover\",\n    value: function handleSuggestionHover(i, e) {\n      this.setState({\n        selectedIndex: i,\n        selectionMode: true\n      });\n    }\n  }, {\n    key: \"moveTag\",\n    value: function moveTag(dragIndex, hoverIndex) {\n      var tags = this.props.tags;\n\n      // locate tags\n      var dragTag = tags[dragIndex];\n\n      // call handler with the index of the dragged tag\n      // and the tag that is hovered\n      this.props.handleDrag(dragTag, dragIndex, hoverIndex);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var moveTag = this.props.handleDrag ? this.moveTag : null;\n\n      var tagItems = this.props.tags.map(function (tag, i) {\n        return _react2.default.createElement(_Tag2.default, {\n          key: tag.id,\n          index: i,\n          tag: tag,\n          labelField: this.props.labelField,\n          onDelete: this.handleDelete.bind(this, i),\n          moveTag: moveTag,\n          removeComponent: this.props.removeComponent,\n          readOnly: this.props.readOnly,\n          classNames: this.state.classNames\n        });\n      }.bind(this));\n\n      // get the suggestions for the given query\n      var query = this.state.query.trim(),\n          selectedIndex = this.state.selectedIndex,\n          suggestions = this.state.suggestions,\n          placeholder = this.props.placeholder,\n          inputName = this.props.name,\n          inputId = this.props.id,\n          maxLength = this.props.maxLength;\n\n      var tagInput = !this.props.readOnly ? _react2.default.createElement(\n        \"div\",\n        { className: this.state.classNames.tagInput },\n        _react2.default.createElement(\"input\", {\n          ref: function ref(input) {\n            _this3.textInput = input;\n          },\n          className: this.state.classNames.tagInputField,\n          type: \"text\",\n          placeholder: placeholder,\n          \"aria-label\": placeholder,\n          onBlur: this.handleBlur,\n          onChange: this.handleChange,\n          onKeyDown: this.handleKeyDown,\n          onPaste: this.handlePaste,\n          name: inputName,\n          id: inputId,\n          maxLength: maxLength\n        }),\n        _react2.default.createElement(_Suggestions2.default, {\n          query: query,\n          suggestions: suggestions,\n          selectedIndex: selectedIndex,\n          handleClick: this.handleSuggestionClick,\n          handleHover: this.handleSuggestionHover,\n          minQueryLength: this.props.minQueryLength,\n          shouldRenderSuggestions: this.props.shouldRenderSuggestions,\n          classNames: this.state.classNames\n        })\n      ) : null;\n\n      return _react2.default.createElement(\n        \"div\",\n        { className: this.state.classNames.tags },\n        _react2.default.createElement(\n          \"div\",\n          { className: this.state.classNames.selected },\n          tagItems,\n          this.props.inline && tagInput\n        ),\n        !this.props.inline && tagInput\n      );\n    }\n  }]);\n\n  return ReactTags;\n}(_react.Component);\n\nReactTags.PropTypes = {\n  placeholder: _propTypes2.default.string,\n  labelField: _propTypes2.default.string,\n  suggestions: _propTypes2.default.array,\n  delimiters: _propTypes2.default.array,\n  autofocus: _propTypes2.default.bool,\n  inline: _propTypes2.default.bool,\n  handleDelete: _propTypes2.default.func.isRequired,\n  handleAddition: _propTypes2.default.func.isRequired,\n  handleDrag: _propTypes2.default.func,\n  handleFilterSuggestions: _propTypes2.default.func,\n  allowDeleteFromEmptyInput: _propTypes2.default.bool,\n  handleInputChange: _propTypes2.default.func,\n  handleInputBlur: _propTypes2.default.func,\n  minQueryLength: _propTypes2.default.number,\n  shouldRenderSuggestions: _propTypes2.default.func,\n  removeComponent: _propTypes2.default.func,\n  autocomplete: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),\n  readOnly: _propTypes2.default.bool,\n  classNames: _propTypes2.default.object,\n  name: _propTypes2.default.string,\n  id: _propTypes2.default.string,\n  maxLength: _propTypes2.default.string\n};\n\nReactTags.defaultProps = {\n  placeholder: DEFAULT_PLACEHOLDER,\n  tags: [],\n  suggestions: [],\n  delimiters: [Keys.ENTER, Keys.TAB],\n  autofocus: true,\n  inline: true,\n  allowDeleteFromEmptyInput: true,\n  minQueryLength: 2,\n  autocomplete: false,\n  readOnly: false\n};\n\nmodule.exports = {\n  WithContext: (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(ReactTags),\n  WithOutContext: ReactTags,\n  Keys: Keys\n};","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/dist-modules/Suggestions.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _isEqual = require(\"lodash/isEqual\");\n\nvar _isEqual2 = _interopRequireDefault(_isEqual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar maybeScrollSuggestionIntoView = function maybeScrollSuggestionIntoView(suggestionEl, suggestionsContainer) {\n  var containerHeight = suggestionsContainer.offsetHeight;\n  var suggestionHeight = suggestionEl.offsetHeight;\n  var relativeSuggestionTop = suggestionEl.offsetTop - suggestionsContainer.scrollTop;\n\n  if (relativeSuggestionTop + suggestionHeight >= containerHeight) {\n    suggestionsContainer.scrollTop += relativeSuggestionTop - containerHeight + suggestionHeight;\n  } else if (relativeSuggestionTop < 0) {\n    suggestionsContainer.scrollTop += relativeSuggestionTop;\n  }\n};\n\nvar Suggestions = function (_Component) {\n  _inherits(Suggestions, _Component);\n\n  function Suggestions() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Suggestions);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Suggestions.__proto__ || Object.getPrototypeOf(Suggestions)).call.apply(_ref, [this].concat(args))), _this), _this.shouldComponentUpdate = function (nextProps) {\n      var _this2 = _this,\n          props = _this2.props;\n\n      var shouldRenderSuggestions = props.shouldRenderSuggestions || _this.shouldRenderSuggestions;\n      return !(0, _isEqual2.default)(props.suggestions, nextProps.suggestions) || shouldRenderSuggestions(nextProps.query) || shouldRenderSuggestions(nextProps.query) != shouldRenderSuggestions(props.query);\n    }, _this.componentDidUpdate = function (prevProps) {\n      var suggestionsContainer = _this.refs.suggestionsContainer;\n      var _this$props = _this.props,\n          selectedIndex = _this$props.selectedIndex,\n          classNames = _this$props.classNames;\n\n\n      if (suggestionsContainer && prevProps.selectedIndex !== selectedIndex) {\n        var activeSuggestion = suggestionsContainer.querySelector(classNames.activeSuggestion);\n\n        if (activeSuggestion) {\n          maybeScrollSuggestionIntoView(activeSuggestion, suggestionsContainer);\n        }\n      }\n    }, _this.markIt = function (input, query) {\n      var escapedRegex = query.trim().replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n      return {\n        __html: input.replace(RegExp(escapedRegex, \"gi\"), \"<mark>$&</mark>\")\n      };\n    }, _this.shouldRenderSuggestions = function (query) {\n      var _this3 = _this,\n          props = _this3.props;\n\n      var minQueryLength = props.minQueryLength || 2;\n      return query.length >= minQueryLength;\n    }, _this.render = function () {\n      var _this4 = _this,\n          props = _this4.props;\n\n      var suggestions = props.suggestions.map(function (item, i) {\n        return _react2.default.createElement(\n          \"li\",\n          {\n            key: i,\n            onMouseDown: props.handleClick.bind(null, i),\n            onMouseOver: props.handleHover.bind(null, i),\n            className: i == props.selectedIndex ? props.classNames.activeSuggestion : \"\" },\n          _react2.default.createElement(\"span\", { dangerouslySetInnerHTML: this.markIt(item, props.query) })\n        );\n      }.bind(_this));\n\n      // use the override, if provided\n      var shouldRenderSuggestions = props.shouldRenderSuggestions || _this.shouldRenderSuggestions;\n      if (suggestions.length === 0 || !shouldRenderSuggestions(props.query)) {\n        return null;\n      }\n\n      return _react2.default.createElement(\n        \"div\",\n        {\n          ref: \"suggestionsContainer\",\n          className: _this.props.classNames.suggestions },\n        _react2.default.createElement(\n          \"ul\",\n          null,\n          \" \",\n          suggestions,\n          \" \"\n        )\n      );\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return Suggestions;\n}(_react.Component);\n\nSuggestions.propTypes = {\n  query: _propTypes2.default.string.isRequired,\n  selectedIndex: _propTypes2.default.number.isRequired,\n  suggestions: _propTypes2.default.array.isRequired,\n  handleClick: _propTypes2.default.func.isRequired,\n  handleHover: _propTypes2.default.func.isRequired,\n  minQueryLength: _propTypes2.default.number,\n  shouldRenderSuggestions: _propTypes2.default.func,\n  classNames: _propTypes2.default.object\n};\nexports.default = Suggestions;","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/dist-modules/Tag.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _flow = require(\"lodash/flow\");\n\nvar _flow2 = _interopRequireDefault(_flow);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ItemTypes = { TAG: \"tag\" };\n\nvar tagSource = {\n  beginDrag: function beginDrag(props) {\n    return { id: props.tag.id, index: props.index };\n  },\n  canDrag: function canDrag(props) {\n    return props.moveTag && !props.readOnly;\n  }\n};\n\nvar tagTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();\n    var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n    var clientOffset = monitor.getClientOffset();\n    var hoverClientX = clientOffset.x - hoverBoundingRect.left;\n\n    // Only perform the move when the mouse has crossed half of the items width\n    if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n      return;\n    }\n\n    props.moveTag(dragIndex, hoverIndex);\n\n    monitor.getItem().index = hoverIndex;\n  },\n  canDrop: function canDrop(props) {\n    return !props.readOnly;\n  }\n};\n\nvar dragSource = function dragSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar dropCollect = function dropCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nfunction RemoveComponent(props) {\n  if (props.readOnly) {\n    return _react2.default.createElement(\"span\", null);\n  }\n\n  if (props.removeComponent) {\n    var _Component = props.removeComponent;\n    return _react2.default.createElement(_Component, props);\n  }\n\n  return _react2.default.createElement(\n    \"a\",\n    { onClick: props.onClick, className: props.className },\n    String.fromCharCode(215)\n  );\n}\n\nvar Tag = function (_Component2) {\n  _inherits(Tag, _Component2);\n\n  function Tag() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Tag);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tag.__proto__ || Object.getPrototypeOf(Tag)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {\n      var _this2 = _this,\n          props = _this2.props;\n\n      var label = props.tag[props.labelField];\n      var connectDragSource = props.connectDragSource,\n          isDragging = props.isDragging,\n          connectDropTarget = props.connectDropTarget,\n          readOnly = props.readOnly,\n          CustomRemoveComponent = props.CustomRemoveComponent;\n\n\n      var tagComponent = _react2.default.createElement(\n        \"span\",\n        {\n          style: { opacity: isDragging ? 0 : 1 },\n          className: props.classNames.tag },\n        label,\n        _react2.default.createElement(RemoveComponent, {\n          className: props.classNames.remove,\n          removeComponent: props.removeComponent,\n          onClick: props.onDelete,\n          readOnly: props.readOnly\n        })\n      );\n      return connectDragSource(connectDropTarget(tagComponent));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return Tag;\n}(_react.Component);\n\nTag.PropTypes = {\n  labelField: _propTypes2.default.string,\n  onDelete: _propTypes2.default.func.isRequired,\n  tag: _propTypes2.default.object.isRequired,\n  moveTag: _propTypes2.default.func,\n  removeComponent: _propTypes2.default.func,\n  classNames: _propTypes2.default.object,\n  readOnly: _propTypes2.default.bool,\n  connectDragSource: _propTypes2.default.func.isRequired,\n  isDragging: _propTypes2.default.bool.isRequired,\n  connectDropTarget: _propTypes2.default.func.isRequired\n};\n\nTag.defaultProps = {\n  labelField: \"text\",\n  readOnly: false\n};\n\nexports.default = (0, _flow2.default)((0, _reactDnd.DragSource)(ItemTypes.TAG, tagSource, dragSource), (0, _reactDnd.DropTarget)(ItemTypes.TAG, tagTarget, dropCollect))(Tag);","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/webpack-dev-server.config.js":"const webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst buildPath = path.resolve(__dirname, \"dist\");\nconst nodeModulesPath = path.resolve(__dirname, \"node_modules\");\n\nconst config = {\n  // Entry points to the project\n  entry: [\n    \"webpack/hot/only-dev-server\",\n    path.join(__dirname, \"/lib/ReactTags.js\"),\n  ],\n  // Server Configuration options\n  devServer: {\n    contentBase: \".\", // Relative directory for base of server\n    hot: true, // Live-reload\n    inline: true,\n    port: 8090, // Port Number\n    host: \"localhost\", // Change to '0.0.0.0' for external facing server\n  },\n  devtool: \"cheap-module-source-map\",\n  output: {\n    path: buildPath, // Path of output file\n    filename: \"ReactTags.min.js\",\n    libraryTarget: \"umd\",\n    library: \"ReactTags\",\n  },\n  externals: {\n    react: \"React\",\n    \"react-dom\": \"ReactDOM\",\n    \"react-dnd\": \"ReactDnD\",\n  },\n  plugins: [\n    // Enables Hot Modules Replacement\n    new webpack.HotModuleReplacementPlugin(),\n    // Allows error warnings but does not stop compiling.\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/, // All .js files\n        loaders: [\"babel-loader\"],\n        exclude: [nodeModulesPath],\n      },\n    ],\n  },\n};\n\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/webpack-production.config.js":"const webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst buildPath = path.resolve(__dirname, \"dist\");\nconst nodeModulesPath = path.resolve(__dirname, \"node_modules\");\n\nconst config = {\n  entry: [path.join(__dirname, \"/lib/ReactTags.js\")],\n  // Render source-map file for final build\n  devtool: \"source-map\",\n  // output config\n  output: {\n    path: buildPath, // Path of output file\n    filename: \"ReactTags.min.js\", // Name of output file\n    libraryTarget: \"umd\",\n    library: \"ReactTags\",\n  },\n  externals: {\n    react: \"React\",\n    \"react-dom\": \"ReactDOM\",\n    \"react-dnd\": \"ReactDnD\",\n  },\n  plugins: [\n    // Define production build to allow React to strip out unnecessary checks\n    new webpack.DefinePlugin({\n      \"process.env\": {\n        NODE_ENV: JSON.stringify(\"production\"),\n      },\n    }),\n    // Minify the bundle\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        // suppresses warnings, usually from module minification\n        warnings: false,\n      },\n    }),\n    // Allows error warnings but does not stop compiling.\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/, // All .js files\n        loaders: [\"babel-loader\"], // react-hot is like browser sync and babel loads jsx and es6-7\n        exclude: [nodeModulesPath],\n      },\n    ],\n  },\n};\n\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/lib/ReactTags.js":"import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport Suggestions from \"./Suggestions\";\nimport PropTypes from \"prop-types\";\nimport Tag from \"./Tag\";\n\n// Constants\nconst Keys = {\n  ENTER: 13,\n  TAB: 9,\n  BACKSPACE: 8,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n  ESCAPE: 27,\n};\n\nconst DEFAULT_PLACEHOLDER = \"Add new tag\";\n\nconst DefaultClassNames = {\n  tags: \"ReactTags__tags\",\n  tagInput: \"ReactTags__tagInput\",\n  tagInputField: \"ReactTags__tagInputField\",\n  selected: \"ReactTags__selected\",\n  tag: \"ReactTags__tag\",\n  remove: \"ReactTags__remove\",\n  suggestions: \"ReactTags__suggestions\",\n  activeSuggestion: \"ReactTags__activeSuggestion\",\n};\n\nclass ReactTags extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suggestions: this.props.suggestions,\n      query: \"\",\n      selectedIndex: -1,\n      selectionMode: false,\n    };\n\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.moveTag = this.moveTag.bind(this);\n    this.handlePaste = this.handlePaste.bind(this);\n    this.resetAndFocusInput = this.resetAndFocusInput.bind(this);\n    this.handleSuggestionHover = this.handleSuggestionHover.bind(this);\n    this.handleSuggestionClick = this.handleSuggestionClick.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      classNames: { ...DefaultClassNames, ...this.props.classNames },\n    });\n  }\n\n  resetAndFocusInput() {\n    const { autofocus, readOnly } = this.props;\n    if (autofocus && !readOnly) {\n      this.textInput.value = \"\";\n      this.textInput.focus();\n    }\n  }\n\n  componentDidMount() {\n    this.resetAndFocusInput();\n  }\n\n  filteredSuggestions(query, suggestions) {\n    if (this.props.handleFilterSuggestions) {\n      return this.props.handleFilterSuggestions(query, suggestions);\n    }\n\n    return suggestions.filter(function(item) {\n      return item.toLowerCase().indexOf(query.toLowerCase()) === 0;\n    });\n  }\n\n  componentWillReceiveProps(props) {\n    const suggestions = this.filteredSuggestions(\n      this.state.query,\n      props.suggestions\n    );\n    this.setState({\n      suggestions: suggestions,\n      classNames: { ...DefaultClassNames, ...props.classNames },\n    });\n  }\n\n  handleDelete(i, e) {\n    this.props.handleDelete(i);\n    this.setState({ query: \"\" });\n    this.resetAndFocusInput();\n  }\n\n  handleChange(e) {\n    if (this.props.handleInputChange) {\n      this.props.handleInputChange(e.target.value.trim());\n    }\n\n    const query = e.target.value.trim();\n    const suggestions = this.filteredSuggestions(query, this.props.suggestions);\n\n    let selectedIndex = this.state.selectedIndex;\n    if (selectedIndex >= suggestions.length) {\n      selectedIndex = suggestions.length - 1;\n    }\n\n    this.setState({\n      query: query,\n      suggestions: suggestions,\n      selectedIndex: selectedIndex,\n    });\n  }\n\n  handleBlur(e) {\n    const value = e.target.value.trim();\n    if (this.props.handleInputBlur) {\n      this.props.handleInputBlur(value);\n      this.textInput.value = \"\";\n    }\n  }\n\n  handleKeyDown(e) {\n    let { query, selectedIndex, suggestions } = this.state;\n\n    // hide suggestions menu on escape\n    if (e.keyCode === Keys.ESCAPE) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setState({\n        selectedIndex: -1,\n        selectionMode: false,\n        suggestions: [],\n      });\n    }\n\n    // When one of the terminating keys is pressed, add current query to the tags.\n    // If no text is typed in so far, ignore the action - so we don't end up with a terminating\n    // character typed in.\n    if (this.props.delimiters.indexOf(e.keyCode) !== -1 && !e.shiftKey) {\n      if (e.keyCode !== Keys.TAB || query !== \"\") {\n        e.preventDefault();\n      }\n\n      if (query !== \"\") {\n        if (this.state.selectionMode && this.state.selectedIndex != -1) {\n          query = this.state.suggestions[this.state.selectedIndex];\n        }\n        this.addTag(query);\n      }\n    }\n\n    // when backspace key is pressed and query is blank, delete tag\n    if (\n      e.keyCode === Keys.BACKSPACE &&\n      query == \"\" &&\n      this.props.allowDeleteFromEmptyInput\n    ) {\n      this.handleDelete(this.props.tags.length - 1);\n    }\n\n    // up arrow\n    if (e.keyCode === Keys.UP_ARROW) {\n      e.preventDefault();\n\n      let { selectedIndex, suggestions } = this.state;\n\n      selectedIndex = selectedIndex <= 0\n        ? suggestions.length - 1\n        : selectedIndex - 1;\n\n      this.setState({\n        selectedIndex: selectedIndex,\n        selectionMode: true,\n      });\n    }\n\n    // down arrow\n    if (e.keyCode === Keys.DOWN_ARROW) {\n      e.preventDefault();\n      this.setState({\n        selectedIndex: (this.state.selectedIndex + 1) % suggestions.length,\n        selectionMode: true,\n      });\n    }\n  }\n\n  handlePaste(e) {\n    e.preventDefault();\n\n    // See: http://stackoverflow.com/a/6969486/1463681\n    const escapeRegex = str =>\n      str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n\n    // Used to determine how the pasted content is split.\n    const delimiterChars = escapeRegex(\n      this.props.delimiters\n        .map(delimiter => {\n          // See: http://stackoverflow.com/a/34711175/1463681\n          const chrCode = delimiter - 48 * Math.floor(delimiter / 48);\n          return String.fromCharCode(96 <= delimiter ? chrCode : delimiter);\n        })\n        .join(\"\")\n    );\n\n    const clipboardData = e.clipboardData || window.clipboardData;\n    const string = clipboardData.getData(\"text\");\n    const regExp = new RegExp(`[${delimiterChars}]+`);\n    string.split(regExp).forEach(tag => this.props.handleAddition(tag));\n  }\n\n  addTag(tag) {\n    if (this.props.autocomplete) {\n      const possibleMatches = this.filteredSuggestions(\n        tag,\n        this.props.suggestions\n      );\n\n      if (\n        (this.props.autocomplete === 1 && possibleMatches.length === 1) ||\n        (this.props.autocomplete === true && possibleMatches.length)\n      ) {\n        tag = possibleMatches[0];\n      }\n    }\n\n    // call method to add\n    this.props.handleAddition(tag);\n\n    // reset the state\n    this.setState({\n      query: \"\",\n      selectionMode: false,\n      selectedIndex: -1,\n    });\n\n    this.resetAndFocusInput();\n  }\n\n  handleSuggestionClick(i, e) {\n    this.addTag(this.state.suggestions[i]);\n  }\n\n  handleSuggestionHover(i, e) {\n    this.setState({\n      selectedIndex: i,\n      selectionMode: true,\n    });\n  }\n\n  moveTag(dragIndex, hoverIndex) {\n    const tags = this.props.tags;\n\n    // locate tags\n    const dragTag = tags[dragIndex];\n\n    // call handler with the index of the dragged tag\n    // and the tag that is hovered\n    this.props.handleDrag(dragTag, dragIndex, hoverIndex);\n  }\n\n  render() {\n    const moveTag = this.props.handleDrag ? this.moveTag : null;\n\n    const tagItems = this.props.tags.map(\n      function(tag, i) {\n        return (\n          <Tag\n            key={tag.id}\n            index={i}\n            tag={tag}\n            labelField={this.props.labelField}\n            onDelete={this.handleDelete.bind(this, i)}\n            moveTag={moveTag}\n            removeComponent={this.props.removeComponent}\n            readOnly={this.props.readOnly}\n            classNames={this.state.classNames}\n          />\n        );\n      }.bind(this)\n    );\n\n    // get the suggestions for the given query\n    const query = this.state.query.trim(),\n      selectedIndex = this.state.selectedIndex,\n      suggestions = this.state.suggestions,\n      placeholder = this.props.placeholder,\n      inputName = this.props.name,\n      inputId = this.props.id,\n      maxLength = this.props.maxLength;\n\n    const tagInput = !this.props.readOnly\n      ? <div className={this.state.classNames.tagInput}>\n          <input\n            ref={input => {\n              this.textInput = input;\n            }}\n            className={this.state.classNames.tagInputField}\n            type=\"text\"\n            placeholder={placeholder}\n            aria-label={placeholder}\n            onBlur={this.handleBlur}\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyDown}\n            onPaste={this.handlePaste}\n            name={inputName}\n            id={inputId}\n            maxLength={maxLength}\n          />\n\n          <Suggestions\n            query={query}\n            suggestions={suggestions}\n            selectedIndex={selectedIndex}\n            handleClick={this.handleSuggestionClick}\n            handleHover={this.handleSuggestionHover}\n            minQueryLength={this.props.minQueryLength}\n            shouldRenderSuggestions={this.props.shouldRenderSuggestions}\n            classNames={this.state.classNames}\n          />\n        </div>\n      : null;\n\n    return (\n      <div className={this.state.classNames.tags}>\n        <div className={this.state.classNames.selected}>\n          {tagItems}\n          {this.props.inline && tagInput}\n        </div>\n        {!this.props.inline && tagInput}\n      </div>\n    );\n  }\n}\n\nReactTags.PropTypes = {\n  placeholder: PropTypes.string,\n  labelField: PropTypes.string,\n  suggestions: PropTypes.array,\n  delimiters: PropTypes.array,\n  autofocus: PropTypes.bool,\n  inline: PropTypes.bool,\n  handleDelete: PropTypes.func.isRequired,\n  handleAddition: PropTypes.func.isRequired,\n  handleDrag: PropTypes.func,\n  handleFilterSuggestions: PropTypes.func,\n  allowDeleteFromEmptyInput: PropTypes.bool,\n  handleInputChange: PropTypes.func,\n  handleInputBlur: PropTypes.func,\n  minQueryLength: PropTypes.number,\n  shouldRenderSuggestions: PropTypes.func,\n  removeComponent: PropTypes.func,\n  autocomplete: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  readOnly: PropTypes.bool,\n  classNames: PropTypes.object,\n  name: PropTypes.string,\n  id: PropTypes.string,\n  maxLength: PropTypes.string,\n};\n\nReactTags.defaultProps = {\n  placeholder: DEFAULT_PLACEHOLDER,\n  tags: [],\n  suggestions: [],\n  delimiters: [Keys.ENTER, Keys.TAB],\n  autofocus: true,\n  inline: true,\n  allowDeleteFromEmptyInput: true,\n  minQueryLength: 2,\n  autocomplete: false,\n  readOnly: false,\n};\n\nmodule.exports = {\n  WithContext: DragDropContext(HTML5Backend)(ReactTags),\n  WithOutContext: ReactTags,\n  Keys: Keys,\n};\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/lib/Suggestions.js":"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEqual from \"lodash/isEqual\";\n\nconst maybeScrollSuggestionIntoView = (suggestionEl, suggestionsContainer) => {\n  const containerHeight = suggestionsContainer.offsetHeight;\n  const suggestionHeight = suggestionEl.offsetHeight;\n  const relativeSuggestionTop =\n    suggestionEl.offsetTop - suggestionsContainer.scrollTop;\n\n  if (relativeSuggestionTop + suggestionHeight >= containerHeight) {\n    suggestionsContainer.scrollTop +=\n      relativeSuggestionTop - containerHeight + suggestionHeight;\n  } else if (relativeSuggestionTop < 0) {\n    suggestionsContainer.scrollTop += relativeSuggestionTop;\n  }\n};\n\nclass Suggestions extends Component {\n  static propTypes = {\n    query: PropTypes.string.isRequired,\n    selectedIndex: PropTypes.number.isRequired,\n    suggestions: PropTypes.array.isRequired,\n    handleClick: PropTypes.func.isRequired,\n    handleHover: PropTypes.func.isRequired,\n    minQueryLength: PropTypes.number,\n    shouldRenderSuggestions: PropTypes.func,\n    classNames: PropTypes.object,\n  };\n\n  shouldComponentUpdate = nextProps => {\n    const { props } = this;\n    const shouldRenderSuggestions =\n      props.shouldRenderSuggestions || this.shouldRenderSuggestions;\n    return (\n      !isEqual(props.suggestions, nextProps.suggestions) ||\n      shouldRenderSuggestions(nextProps.query) ||\n      shouldRenderSuggestions(nextProps.query) !=\n        shouldRenderSuggestions(props.query)\n    );\n  };\n\n  componentDidUpdate = prevProps => {\n    const suggestionsContainer = this.refs.suggestionsContainer;\n    const { selectedIndex, classNames } = this.props;\n\n    if (suggestionsContainer && prevProps.selectedIndex !== selectedIndex) {\n      const activeSuggestion = suggestionsContainer.querySelector(\n        classNames.activeSuggestion\n      );\n\n      if (activeSuggestion) {\n        maybeScrollSuggestionIntoView(activeSuggestion, suggestionsContainer);\n      }\n    }\n  };\n\n  markIt = (input, query) => {\n    const escapedRegex = query.trim().replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    return {\n      __html: input.replace(RegExp(escapedRegex, \"gi\"), \"<mark>$&</mark>\"),\n    };\n  };\n\n  shouldRenderSuggestions = query => {\n    const { props } = this;\n    const minQueryLength = props.minQueryLength || 2;\n    return query.length >= minQueryLength;\n  };\n\n  render = () => {\n    const { props } = this;\n    const suggestions = props.suggestions.map(\n      function(item, i) {\n        return (\n          <li\n            key={i}\n            onMouseDown={props.handleClick.bind(null, i)}\n            onMouseOver={props.handleHover.bind(null, i)}\n            className={\n              i == props.selectedIndex ? props.classNames.activeSuggestion : \"\"\n            }>\n            <span dangerouslySetInnerHTML={this.markIt(item, props.query)} />\n          </li>\n        );\n      }.bind(this)\n    );\n\n    // use the override, if provided\n    const shouldRenderSuggestions =\n      props.shouldRenderSuggestions || this.shouldRenderSuggestions;\n    if (suggestions.length === 0 || !shouldRenderSuggestions(props.query)) {\n      return null;\n    }\n\n    return (\n      <div\n        ref=\"suggestionsContainer\"\n        className={this.props.classNames.suggestions}>\n        <ul> {suggestions} </ul>\n      </div>\n    );\n  };\n}\n\nexport default Suggestions;\n","/home/travis/build/npmtest/node-npmtest-react-tag-input/node_modules/react-tag-input/lib/Tag.js":"import React, { Component } from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { DragSource, DropTarget } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport flow from \"lodash/flow\";\n\nconst ItemTypes = { TAG: \"tag\" };\n\nconst tagSource = {\n  beginDrag: props => {\n    return { id: props.tag.id, index: props.index };\n  },\n  canDrag: props => props.moveTag && !props.readOnly,\n};\n\nconst tagTarget = {\n  hover: (props, monitor, component) => {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n    const hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n    const clientOffset = monitor.getClientOffset();\n    const hoverClientX = clientOffset.x - hoverBoundingRect.left;\n\n    // Only perform the move when the mouse has crossed half of the items width\n    if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n      return;\n    }\n\n    props.moveTag(dragIndex, hoverIndex);\n\n    monitor.getItem().index = hoverIndex;\n  },\n  canDrop: props => !props.readOnly,\n};\n\nconst dragSource = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n};\n\nconst dropCollect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n  };\n};\n\nfunction RemoveComponent(props) {\n  if (props.readOnly) {\n    return <span />;\n  }\n\n  if (props.removeComponent) {\n    const Component = props.removeComponent;\n    return <Component {...props} />;\n  }\n\n  return (\n    <a onClick={props.onClick} className={props.className}>\n      {String.fromCharCode(215)}\n    </a>\n  );\n}\n\nclass Tag extends Component {\n  render = () => {\n    const { props } = this;\n    const label = props.tag[props.labelField];\n    const {\n      connectDragSource,\n      isDragging,\n      connectDropTarget,\n      readOnly,\n      CustomRemoveComponent,\n    } = props;\n\n    const tagComponent = (\n      <span\n        style={{ opacity: isDragging ? 0 : 1 }}\n        className={props.classNames.tag}>\n        {label}\n        <RemoveComponent\n          className={props.classNames.remove}\n          removeComponent={props.removeComponent}\n          onClick={props.onDelete}\n          readOnly={props.readOnly}\n        />\n      </span>\n    );\n    return connectDragSource(connectDropTarget(tagComponent));\n  };\n}\n\nTag.PropTypes = {\n  labelField: PropTypes.string,\n  onDelete: PropTypes.func.isRequired,\n  tag: PropTypes.object.isRequired,\n  moveTag: PropTypes.func,\n  removeComponent: PropTypes.func,\n  classNames: PropTypes.object,\n  readOnly: PropTypes.bool,\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n};\n\nTag.defaultProps = {\n  labelField: \"text\",\n  readOnly: false,\n};\n\nexport default flow(\n  DragSource(ItemTypes.TAG, tagSource, dragSource),\n  DropTarget(ItemTypes.TAG, tagTarget, dropCollect)\n)(Tag);\n"}